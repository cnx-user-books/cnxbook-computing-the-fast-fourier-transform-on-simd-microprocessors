<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:bib="http://bibtexml.sf.net/">
  <title>Existing Libraries</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m43809</md:content-id>
  <md:title>Existing Libraries</md:title>
  <md:abstract/>
  <md:uuid>a7467abd-e056-4a47-8a8b-9570f2c270d3</md:uuid>
</metadata>

<content>
    <para id="id62160">Owing to the importance of efficiently computing FFTs in signal processing and other areas, there have been many implementations for microprocessors; FFTW's benchmark software, for example, includes a collection of 25 different FFT implementations. However, of the many implementations, only a few have competed with the state
of the art over the last fifteen years. Since its first release in
1997, FFTW has risen to become one of the most well known fast Fourier
transform libraries. Other libraries reviewed
in this chapter are SPIRAL, UHFFT, djbfft, Apple vDSP, MatrixFFT, and Intel IPP.</para>
    <section id="cid1">
      <title>The “Fastest Fourier transform in the west” (FFTW)</title>
      <para id="id62179">FFTW <link target-id="bid0"/>, <link target-id="bid1"/>, <link target-id="bid2"/> is an implementation of the DFT that attempts to automatically adapt to
the hardware in order to maximise performance, and its development in 1997 was
predicated on the idea that it had become too complicated to optimize the
performance of the fast Fourier transform for modern microprocessors.</para>
      <para id="id62200">The latest release of FFTW, version 3.3, generates a library of over 150
“codelets” at compile time. The codelets are fragments of machine-independent
straight-line code derived from DFT algorithms, including the Cooley-Tukey <link target-id="bid3"/> algorithm and its derivatives the split-radix <link target-id="bid4"/>, <link target-id="bid5"/>, conjugate-pair <link target-id="bid2"/>, <link target-id="bid6"/> and mixed-radix algorithms. Radar <link target-id="bid7"/> and Bluestein <link target-id="bid8"/>, <link target-id="bid9"/>, <link target-id="bid10"/> algorithms are used for sizes that are prime, and the prime-factor algorithm <link target-id="bid9"/>, <link target-id="bid11"/> for sizes that are factored by co-primes. At runtime, a plan for
a specific problem, e.g., 1024 point 1D forward double precision out-of-place
DFT, is generated by searching the huge space of possible codelet
configurations for the best solution.</para>
      <para id="id62609">The codelet generator operates in four phases: creation, simplification, scheduling, and unparsing (code generation). During creation, the codelet generator produces a representation of the computation in the form of a DAG. The DAG is expressed in terms of complex numbers <link target-id="bid12"/>, and can be viewed as a linear network <link target-id="bid13"/>. In the simplification stage, algebraic transformations and common subexpression elimination rewriting rules <link target-id="bid14"/> are applied to each node of the DAG, which is then topologically sorted to produce a schedule. In a 2008 paper <link target-id="bid12"/>, Johnson and Frigo contend that “the compiler needs help with such long blocks of code", and an earlier paper from 1999 <link target-id="bid0"/> is cited to support the hypothesis that compilers are not
capable of efficiently allocating registers and scheduling code for hard-coded blocks of about size 64, which compares an earlier version of FFTW compiled with an older compiler<footnote id="uid1">Sun WorkShop Compilers 4.2 30 Oct 1996 C 4.2</footnote> to an FFT from Sun's Performance Library. There is no mention of re-testing the aforementioned hypothesis with more advanced
compilers.</para>
      <para id="id62662">FFTW has several modes available for searching the configuration space of
codelets. In “patient” mode, FFTW uses dynamic programming to evaluate the
runtime of almost all combinations of possible plans. As the runtime of
many sub-problems is repeatedly evaluated while searching the configuration space,
the results of locally optimized sub-problems are cached,
reducing runtime of the planner while producing results very close to that of
an exhaustive search.</para>
      <para id="id62672">In “estimate” mode, FFTW minimizes a heuristic cost that is a function of a
particular configuration's count of floating point operations and extraneous memory operations (for
buffering and transposes). Compared to patient mode, the runtime of the planner
is reduced by several orders of magnitude, at the expense of runtime
performance while executing the plan. For executing plans of 1D complex
transforms on a PowerPC G5, the median and peak difference in runtime
performance between patient and estimate modes was 20% and 72%, respectively.
This result is used by Frigo and Johnson to support the hypothesis that there
is no longer any correlation between operation counts and runtime performance
on modern machines <link target-id="bid1"/>.</para>
      <para id="id62693">Frigo and Johnson discuss a small number of planner solutions in their 2005
paper on the design of FFTW3 <link target-id="bid1"/>, and conclude that “we do not
really understand the planner's choices because we cannot predict what plans
will be produced. Indeed, this is the whole point of implementing a planner.”
They do not mention the use of more rigorous methods, such as machine learning, for the purposes of predicting performance.</para>
      <para id="id62708">FFTW supports computation of complex DFTs with SIMD extensions by means of two-way parallel computation of real DFTs <link target-id="bid12"/>. The Vienna MAP vectorizer <link target-id="bid15"/>, <link target-id="bid16"/>, <link target-id="bid17"/> has also been coupled with FFTW to produce a high-performance FFT library for the IBM Blue Gene/L supercomputer <link target-id="bid18"/> that is up to 80% faster than the best-performing scalar FFT codes generated by FFTW <link target-id="bid19"/>.</para>
    </section>
    <section id="cid2">
      <title>Daniel Bernstein's FFT (djbfft)</title>
      <para id="id62758">In 1997, Daniel Bernstein noticed that it was not difficult to write code that out-performed
FFTW <link target-id="bid20"/>. He had written 86 lines of unscheduled code that computed a size 256 single precision
transform in about 35000 Pentium cycles – faster than FFTW. After spending a few more days doing
“some casual instruction scheduling,” he could compute the same transform with about 24000
Pentium cycles (ibid.).</para>
      <para id="id62773">These performance results directly contradicted the assumption that predicated
FFTW: that it was too hard to predict the performance of FFT code on modern
microprocessors. Development of djbfft continued until 1999, and it had succeeded in
becoming the fastest library for computing FFTs on most Pentium and SPARC machines.</para>
      <para id="id62779">Bernstein's FFT is notable for having been the first publicly available library to exploit the advantages of the conjugate-pair or “-1 exponent” algorithm. After Bernstein demonstrated the advantages of the algorithm in djbfft, Frigo and Johnson followed with an implementation in FFTW <link target-id="bid2"/>.</para>
    </section>
    <section id="cid3">
      <title>SPIRAL</title>
      <para id="id62802">SPIRAL <link target-id="bid21"/>, <link target-id="bid22"/>, <link target-id="bid23"/> attempts to automatically optimize code for signal processing
functions such as the discrete Fourier transform. SPIRAL's goal is to automatically optimize signal processing functions at the push of a button, with results that are as good as hand-optimized codes.</para>
      <para id="id62823">In contrast to FFTW, SPIRAL's optimization is performed at compile time, and
thus the generated code is less portable. Another point of difference is in the
search methods: while FFTW uses dynamic programming, SPIRAL uses a
wide range of techniques that include machine learning <link target-id="bid23"/>, <link target-id="bid22"/>.</para>
      <para id="id62841">Franchetti and Puschel argue that vectorization is best performed at the algorithm level of abstraction by manipulating Kronecker product expressions through mathematical identities <link target-id="bid24"/>, and this is the basis for a rewriting system <link target-id="bid25"/> that vectorizes for short vector machines <link target-id="bid26"/>, <link target-id="bid27"/>, <link target-id="bid16"/>.</para>
      <para id="id62875">In <link target-id="bid25"/>, SPIRAL is slower than FFTW 3.1 for 2-way double-precision power of two transforms, but SPIRAL is fastest for 4-way single-precision power of two transforms where <m:math overflow="scroll"><m:mrow><m:mn>16</m:mn><m:mo>≤</m:mo><m:mi>n</m:mi><m:mo>≤</m:mo><m:mn>128</m:mn></m:mrow></m:math>. SPIRAL generates code that is characterized by large basic blocks and single-threaded performance does not scale beyond sizes of about 4096 points. Indeed, source code is only publicly available for sizes 2 through to 8192 points <link target-id="bid28"/>.</para>
    </section>
    <section id="cid4">
      <title>UHFFT</title>
      <para id="id62922">UHFFT <link target-id="bid29"/>, <link target-id="bid30"/>, <link target-id="bid31"/>, <link target-id="bid32"/>, <link target-id="bid33"/>, like FFTW, generates a library of codelets which are assembled into transforms by a planner. The planner uses dynamic programming to search an exponential space of possible algorithms, factors and schedules, relying on codelet timings to predict transform execution times <link target-id="bid31"/>.</para>
      <para id="id62961">UHFFT uses the mixed-radix and split-radix <link target-id="bid4"/>, <link target-id="bid5"/> algorithms for power of two sizes, the prime-factor algorithm <link target-id="bid9"/>, <link target-id="bid11"/> for sizes that are factored by co-primes, and the Radar <link target-id="bid7"/> algorithm for sizes that are prime.</para>
      <para id="id62994">UHFFT generates a schedule from a DAG which has been topologically sorted, mainly to optimize memory reuse distance <link target-id="bid31"/>. The schedule is then unparsed to C code.</para>
      <para id="id63005">Scalar results on Itanium2 and Opteron show that UHFFT's dynamic programming approach can choose a plan having performance within 10% of the actual optimal plan. For power of two sizes, UHFFT's performance was typically worse than FFTW or Intel MKL, while UHFFT was faster than FFTW for prime-factor and prime sizes (ibid.).</para>
    </section>
    <section id="cid5">
      <title>Intel Integrated Performance Primitives (IPP)</title>
      <para id="id63020">Of the closed source FFT implementations, the IPP library <link target-id="bid34"/> provides the best results for
most sizes of DFT on machines with Intel processors. IPP includes a number of different FFT implementations that
appear to be hand optimized for different machine configurations, and in
contrast to FFTW, IPP deterministically chooses the best code to run based on the
capabilities of the machine and the OS – achieving results that are typically
superior to FFTW.</para>
      <para id="id63037">Because IPP is closed source, there is no publicly available information
regarding the algorithms and techniques used.</para>
    </section>
    <section id="cid6">
      <title>Apple vDSP</title>
      <para id="id63050">The Apple Accelerate libraries contain a wide range of computationally intensive functions
that have been optimized for vector computation on PowerPC, x86 and ARM architectures.
Within the Accelerate library, vDSP is a collection of DSP functions that includes the FFT.</para>
      <para id="id63056">The vDSP implementation of the FFT is distinctive among the other libraries reviewed in this chapter
in that it only operates on data that is stored in split format (where the real and imaginary parts of complex numbers are stored in separate arrays). However, many applications have data that is already in
interleaved format (where the real and imaginary part of each complex number are stored adjacent in memory), or require data in interleaved format, and so vDSP provides un-zip/zip functions for converting data to/from split format.</para>
      <para id="id62474">The Apple vDSP library is notable for having very good FFT performance on ARM NEON devices, while its x86 performance is average (comparable with FFTW “estimate” mode performance).</para>
      <para id="id62480">As with IPP, vDSP is only distributed in binary form and thus little can be said about the
algorithms and techniques employed.</para>
    </section>
    <section id="cid7">
      <title>MatrixFFT</title>
      <para id="id62494">MatrixFFT is a library for efficiently computing large transforms of more than <m:math overflow="scroll"><m:msup><m:mn>2</m:mn><m:mn>18</m:mn></m:msup></m:math> points on Apple hardware, with sustained processing rates reportedly being as high as 40 CTGs for very large single precision transforms. Large scale FFTs have been used in areas such as image processing (with images of over <m:math overflow="scroll"><m:msup><m:mn>10</m:mn><m:mn>9</m:mn></m:msup></m:math> pixels) and experimental mathematics (for extreme-precision computation of <m:math overflow="scroll"><m:mi>π</m:mi></m:math>).</para>
      <para id="id62535">MatrixFFT uses the four-step algorithm to decompose a transform into smaller sub-transforms that fit in the cache <link target-id="bid35"/>, and computes the smaller sub-transforms with Apple vDSP. Interestingly, MatrixFFT has better performance – in many cases – while using interleaved format
to store the data, even though the interleaved format must be converted to split format before using vDSP <link target-id="bid36"/>.</para>
      <para id="id63213">MatrixFFT includes a calibration utility that evaluates the various implementation parameters for each size of transform on a given machine, which can then be used to re-compile the library so
that it achieves best performance on that particular machine.</para>
      <para id="id63219">MatrixFFT is freely available and distributed in source code form by Apple <link target-id="bid37"/>.</para>
    </section>
  </content>
  <bib:file>
    <bib:entry id="bid31">
      <bib:article>
        <!--required fields-->
        <bib:author>Ali, A. and Johnsson, L.</bib:author>
        <bib:title>UHFFT: A High Performance DFT Framework</bib:title>
        <bib:journal/>
        <bib:year>2006</bib:year>
        <!--optional fields-->
        <bib:volume/>
        <bib:number/>
        <bib:pages/>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid29">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Ali, A. and Johnsson, L. and Mirkovic, D.</bib:author>
        <bib:title>Empirical Auto-tuning Code Generator for FFT and Trignometric Transforms</bib:title>
        <bib:booktitle>ODES: 5th Workshop on Optimizations for DSP and Embedded Systems, in conjunction with International Symposium on Code Generation and Optimization (CGO)</bib:booktitle>
        <bib:year>2007</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages/>
        <bib:address/>
        <bib:month/>
        <bib:organization/>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid30">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Ali, A. and Johnsson, L. and Subhlok, J.</bib:author>
        <bib:title>Scheduling FFT computation on SMP and multicore systems</bib:title>
        <bib:booktitle>Proceedings of the 21st annual international conference on Supercomputing</bib:booktitle>
        <bib:year>2007</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages>293–301</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>ACM</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid35">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Bailey, D.H.</bib:author>
        <bib:title>FFTs in external or hierarchical memory</bib:title>
        <bib:booktitle>Proceedings of the 1989 ACM/IEEE conference on Supercomputing</bib:booktitle>
        <bib:year>1989</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages>234–242</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>ACM</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid20">
      <bib:misc>
        <!--required fields-->
        <!--optional fields-->
        <bib:author>Bernstein, D.</bib:author>
        <bib:title>djbfft</bib:title>
        <bib:howpublished>URL: http://cr.yp.to/djbfft.html</bib:howpublished>
        <bib:month>August</bib:month>
        <bib:year>2011</bib:year>
        <bib:note/>
      </bib:misc>
    </bib:entry>
    <bib:entry id="bid8">
      <bib:article>
        <!--required fields-->
        <bib:author>Bluestein, L.</bib:author>
        <bib:title>A linear filtering approach to the computation of discrete Fourier transform</bib:title>
        <bib:journal>Audio and Electroacoustics, IEEE Transactions on</bib:journal>
        <bib:year>1970</bib:year>
        <!--optional fields-->
        <bib:volume>18</bib:volume>
        <bib:number>4</bib:number>
        <bib:pages>451–455</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid13">
      <bib:article>
        <!--required fields-->
        <bib:author>Crochiere, R.E. and Oppenheim, A.V.</bib:author>
        <bib:title>Analysis of linear digital networks</bib:title>
        <bib:journal>Proceedings of the IEEE</bib:journal>
        <bib:year>1975</bib:year>
        <!--optional fields-->
        <bib:volume>63</bib:volume>
        <bib:number>4</bib:number>
        <bib:pages>581–595</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid3">
      <bib:article>
        <!--required fields-->
        <bib:author>Cooley, J.W. and Tukey, J.W.</bib:author>
        <bib:title>An Algorithm for the Machine Calculation of Complex Fourier Series</bib:title>
        <bib:journal>Mathematics of Computation</bib:journal>
        <bib:year>1965</bib:year>
        <!--optional fields-->
        <bib:volume>19</bib:volume>
        <bib:number>90</bib:number>
        <bib:pages>297–301</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid4">
      <bib:article>
        <!--required fields-->
        <bib:author>Duhamel, P. and Hollmann, H.</bib:author>
        <bib:title>Split radix FFT algorithm</bib:title>
        <bib:journal>Electronics Letters</bib:journal>
        <bib:year>1984</bib:year>
        <!--optional fields-->
        <bib:volume>20</bib:volume>
        <bib:number>1</bib:number>
        <bib:pages>14–16</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid1">
      <bib:article>
        <!--required fields-->
        <bib:author>Frigo, M. and Johnson, S.G.</bib:author>
        <bib:title>The design and implementation of FFTW3</bib:title>
        <bib:journal>Proceedings of the IEEE</bib:journal>
        <bib:year>2005</bib:year>
        <!--optional fields-->
        <bib:volume>93</bib:volume>
        <bib:number>2</bib:number>
        <bib:pages>216–231</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid15">
      <bib:article>
        <!--required fields-->
        <bib:author>Franchetti, F. and Kral, S. and Lorenz, J. and Ueberhuber, C.W.</bib:author>
        <bib:title>Efficient utilization of SIMD extensions</bib:title>
        <bib:journal>Proceedings of the IEEE</bib:journal>
        <bib:year>2005</bib:year>
        <!--optional fields-->
        <bib:volume>93</bib:volume>
        <bib:number>2</bib:number>
        <bib:pages>409–425</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid24">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Franchetti, F. and Puschel, M.</bib:author>
        <bib:title>A SIMD vectorizing compiler for digital signal processing algorithms</bib:title>
        <bib:booktitle>Parallel and Distributed Processing Symposium., Proceedings International, IPDPS 2002, Abstracts and CD-ROM</bib:booktitle>
        <bib:year>2002</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages>20–26</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>IEEE</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid27">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Franchetti, F. and Puschel, M.</bib:author>
        <bib:title>Short vector code generation and adaptation for DSP algorithms</bib:title>
        <bib:booktitle>Acoustics, Speech, and Signal Processing, 2003. Proceedings.(ICASSP'03). 2003 IEEE International Conference on</bib:booktitle>
        <bib:year>2003</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:volume>2</bib:volume>
        <bib:series/>
        <bib:pages>II–537</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>IEEE</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid26">
      <bib:phdthesis>
        <!--required fields-->
        <bib:author>Franchetti, F.</bib:author>
        <bib:title>Performance portable short vector transforms</bib:title>
        <bib:school>Technische Universität Wien</bib:school>
        <bib:year>2003</bib:year>
        <!--optional fields-->
        <bib:type>Ph. D. Thesis</bib:type>
        <bib:address/>
        <bib:month/>
        <bib:note/>
      </bib:phdthesis>
    </bib:entry>
    <bib:entry id="bid0">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Frigo, M.</bib:author>
        <bib:title>A fast Fourier transform compiler</bib:title>
        <bib:booktitle>ACM SIGPLAN Notices</bib:booktitle>
        <bib:year>1999</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:volume>34</bib:volume>
        <bib:series/>
        <bib:pages>169–180</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>ACM</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid21">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Franchetti, F. and Voronenko, Y. and Puschel, M.</bib:author>
        <bib:title>FFT program generation for shared memory: SMP and multicore</bib:title>
        <bib:booktitle>SC 2006 Conference, Proceedings of the ACM/IEEE</bib:booktitle>
        <bib:year>2006</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages>51–51</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>IEEE</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid25">
      <bib:article>
        <!--required fields-->
        <bib:author>Franchetti, F. and Voronenko, Y. and Püschel, M.</bib:author>
        <bib:title>A rewriting system for the vectorization of signal transforms</bib:title>
        <bib:journal>High Performance Computing for Computational Science-VECPAR 2006</bib:journal>
        <bib:year>2007</bib:year>
        <!--optional fields-->
        <bib:volume/>
        <bib:number/>
        <bib:pages>363–377</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid37">
      <bib:misc>
        <!--required fields-->
        <!--optional fields-->
        <bib:author>Inc., Apple</bib:author>
        <bib:title>Advanced Computation Group</bib:title>
        <bib:howpublished>URL: http://www.apple.com/acg/</bib:howpublished>
        <bib:month>November</bib:month>
        <bib:year>2011</bib:year>
        <bib:note/>
      </bib:misc>
    </bib:entry>
    <bib:entry id="bid34">
      <bib:misc>
        <!--required fields-->
        <!--optional fields-->
        <bib:author>Inc., Intel</bib:author>
        <bib:title>Intel IPP</bib:title>
        <bib:howpublished>URL: http://software.intel.com/en-us/articles/intel-ipp/</bib:howpublished>
        <bib:month>November</bib:month>
        <bib:year>2011</bib:year>
        <bib:note/>
      </bib:misc>
    </bib:entry>
    <bib:entry id="bid2">
      <bib:article>
        <!--required fields-->
        <bib:author>Johnson, S.G. and Frigo, M.</bib:author>
        <bib:title>A modified split-radix FFT with fewer arithmetic operations</bib:title>
        <bib:journal>Signal Processing, IEEE Transactions on</bib:journal>
        <bib:year>2006</bib:year>
        <!--optional fields-->
        <bib:volume>55</bib:volume>
        <bib:number>1</bib:number>
        <bib:pages>111–119</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid12">
      <bib:incollection>
        <!--required fields-->
        <bib:author>Johnson, S. G. and Frigo, M.</bib:author>
        <bib:title>Implementing FFTs in practice</bib:title>
        <bib:booktitle>Fast Fourier Transforms</bib:booktitle>
        <bib:publisher>Rice University</bib:publisher>
        <bib:year>2008</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series>Connexions</bib:series>
        <bib:type/>
        <bib:chapter>11</bib:chapter>
        <bib:pages/>
        <bib:address>Houston TX</bib:address>
        <bib:edition/>
        <bib:month>September</bib:month>
        <bib:note/>
      </bib:incollection>
    </bib:entry>
    <bib:entry id="bid6">
      <bib:article>
        <!--required fields-->
        <bib:author>Kamar, I. and Elcherif, Y.</bib:author>
        <bib:title>Conjugate pair fast Fourier transform</bib:title>
        <bib:journal>Electronics Letters</bib:journal>
        <bib:year>1989</bib:year>
        <!--optional fields-->
        <bib:volume>25</bib:volume>
        <bib:number/>
        <bib:pages>324</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid17">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Kral, S. and Franchetti, F. and Lorenz, J. and Ueberhuber, C. and Wurzinger, P.</bib:author>
        <bib:title>FFT compiler techniques</bib:title>
        <bib:booktitle>Compiler Construction</bib:booktitle>
        <bib:year>2004</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages>2725–2725</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>Springer</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid16">
      <bib:article>
        <!--required fields-->
        <bib:author>Kral, S. and Franchetti, F. and Lorenz, J. and Ueberhuber, C.</bib:author>
        <bib:title>SIMD vectorization of straight line FFT code</bib:title>
        <bib:journal>Euro-Par 2003 Parallel Processing</bib:journal>
        <bib:year>2003</bib:year>
        <!--optional fields-->
        <bib:volume/>
        <bib:number/>
        <bib:pages>251–260</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid19">
      <bib:article>
        <!--required fields-->
        <bib:author>Lorenz, J. and Kral, S. and Franchetti, F. and Ueberhuber, C.W.</bib:author>
        <bib:title>Vectorization techniques for the Blue Gene/L double FPU</bib:title>
        <bib:journal>IBM Journal of Research and Development</bib:journal>
        <bib:year>2005</bib:year>
        <!--optional fields-->
        <bib:volume>49</bib:volume>
        <bib:number>2.3</bib:number>
        <bib:pages>437–446</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid18">
      <bib:article>
        <!--required fields-->
        <bib:author>Moreira, J.E. and Almási, G. and Archer, C. and Bellofatto, R. and Bergner, P. and Brunheroto, J.R. and Brutman, M. and Castanos, J.G. and Crumley, PG and Gupta, M.</bib:author>
        <bib:title>Blue Gene/L programming and operating environment</bib:title>
        <bib:journal>IBM Journal of Research and Development</bib:journal>
        <bib:year>2005</bib:year>
        <!--optional fields-->
        <bib:volume>49</bib:volume>
        <bib:number>2.3</bib:number>
        <bib:pages>367–376</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid33">
      <bib:article>
        <!--required fields-->
        <bib:author>Mirkovic, D. and Johnsson, S.L.</bib:author>
        <bib:title>Automatic performance tuning in the UHFFT library</bib:title>
        <bib:journal>Lecture notes in computer science</bib:journal>
        <bib:year>2001</bib:year>
        <!--optional fields-->
        <bib:volume/>
        <bib:number/>
        <bib:pages>I–71</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid32">
      <bib:inproceedings>
        <!--required fields-->
        <bib:author>Mirkovic, D. and Mahasoom, R. and Johnsson, L.</bib:author>
        <bib:title>Adaptive software library for fast Fourier transforms</bib:title>
        <bib:booktitle>2000 International Conference on Supercomputing</bib:booktitle>
        <bib:year>2000</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages>215–224</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization/>
        <bib:publisher/>
        <bib:note/>
      </bib:inproceedings>
    </bib:entry>
    <bib:entry id="bid9">
      <bib:book>
        <!--required fields-->
        <bib:author>Oppenheim, A.V. and Schafer, R.W. and Buck, J.R.</bib:author>
        <bib:title>Discrete-time signal processing</bib:title>
        <bib:publisher>Prentice hall Upper Saddle River eN. JNJ</bib:publisher>
        <bib:year>1989</bib:year>
        <!--optional fields-->
        <bib:volume>2</bib:volume>
        <bib:series/>
        <bib:address/>
        <bib:edition/>
        <bib:month/>
        <bib:note/>
      </bib:book>
    </bib:entry>
    <bib:entry id="bid23">
      <bib:article>
        <!--required fields-->
        <bib:author>Puschel, M. and Moura, J.M.F. and Johnson, J.R. and Padua, D. and Veloso, M.M. and Singer, B.W. and Xiong, J. and Franchetti, F. and Gacic, A. and Voronenko, Y.</bib:author>
        <bib:title>SPIRAL: Code generation for DSP transforms</bib:title>
        <bib:journal>Proceedings of the IEEE</bib:journal>
        <bib:year>2005</bib:year>
        <!--optional fields-->
        <bib:volume>93</bib:volume>
        <bib:number>2</bib:number>
        <bib:pages>232–275</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid22">
      <bib:article>
        <!--required fields-->
        <bib:author>Puschel, M. and Moura, J.M.F. and Singer, B. and Xiong, J. and Johnson, J. and Padua, D. and Veloso, M. and Johnson, R.W.</bib:author>
        <bib:title>SPIRAL: A generator for platform-adapted libraries of signal processing alogorithms</bib:title>
        <bib:journal>International Journal of High Performance Computing Applications</bib:journal>
        <bib:year>2004</bib:year>
        <!--optional fields-->
        <bib:volume>18</bib:volume>
        <bib:number>1</bib:number>
        <bib:pages>21</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid7">
      <bib:article>
        <!--required fields-->
        <bib:author>Rader, C.M.</bib:author>
        <bib:title>Discrete Fourier transforms when the number of data samples is prime</bib:title>
        <bib:journal>Proceedings of the IEEE</bib:journal>
        <bib:year>1968</bib:year>
        <!--optional fields-->
        <bib:volume>56</bib:volume>
        <bib:number>6</bib:number>
        <bib:pages>1107–1108</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid36">
      <bib:techreport>
        <!--required fields-->
        <bib:author>R. Crandall, J. Klivington and Mitchell, D.</bib:author>
        <bib:title>Large-scale FFTs and convolutions on Apple hardware</bib:title>
        <bib:institution>Apple Inc Advanced Computation Group</bib:institution>
        <bib:year>2009</bib:year>
        <!--optional fields-->
        <bib:type>Technical report</bib:type>
        <bib:number/>
        <bib:address/>
        <bib:month/>
        <bib:note/>
      </bib:techreport>
    </bib:entry>
    <bib:entry id="bid14">
      <bib:book>
        <!--required fields-->
        <bib:author>Robinson, A.</bib:author>
        <bib:title>Handbook of automated reasoning</bib:title>
        <bib:publisher>Elsevier</bib:publisher>
        <bib:year>2001</bib:year>
        <!--optional fields-->
        <bib:volume>2</bib:volume>
        <bib:series/>
        <bib:address/>
        <bib:edition/>
        <bib:month/>
        <bib:note/>
      </bib:book>
    </bib:entry>
    <bib:entry id="bid10">
      <bib:article>
        <!--required fields-->
        <bib:author>Rabiner, L. and Schafer, R. and Rader, C.</bib:author>
        <bib:title>The chirp z-transform algorithm</bib:title>
        <bib:journal>Audio and Electroacoustics, IEEE Transactions on</bib:journal>
        <bib:year>1969</bib:year>
        <!--optional fields-->
        <bib:volume>17</bib:volume>
        <bib:number>2</bib:number>
        <bib:pages>86–92</bib:pages>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid28">
      <bib:misc>
        <!--required fields-->
        <!--optional fields-->
        <bib:author/>
        <bib:title>SPIRAL: A generator for platform-adapted libraries of signal processing alogorithms</bib:title>
        <bib:howpublished>URL: http://www.spiral.net/index.html</bib:howpublished>
        <bib:month>November</bib:month>
        <bib:year>2011</bib:year>
        <bib:note/>
      </bib:misc>
    </bib:entry>
    <bib:entry id="bid11">
      <bib:article>
        <!--required fields-->
        <bib:author>Temperton, C.</bib:author>
        <bib:title>Note on prime factor FFT algorithms</bib:title>
        <bib:journal>J. Comput. Phys.</bib:journal>
        <bib:year>1983</bib:year>
        <!--optional fields-->
        <bib:volume>1</bib:volume>
        <bib:number/>
        <bib:pages/>
        <bib:month/>
        <bib:note/>
      </bib:article>
    </bib:entry>
    <bib:entry id="bid5">
      <bib:conference>
        <!--required fields-->
        <bib:author>Yavne, R.</bib:author>
        <bib:title>An economical method for calculating the discrete Fourier transform</bib:title>
        <bib:booktitle>Proceedings of the December 9-11, 1968, fall joint computer conference, part I</bib:booktitle>
        <bib:year>1968</bib:year>
        <!--optional fields-->
        <bib:editor/>
        <bib:number/>
        <bib:series/>
        <bib:pages>115–125</bib:pages>
        <bib:address/>
        <bib:month/>
        <bib:organization>ACM</bib:organization>
        <bib:publisher/>
        <bib:note/>
      </bib:conference>
    </bib:entry>
  </bib:file>
</document>